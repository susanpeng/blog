{"pageProps":{"blognum":8,"key1":0,"slugprev":"api-reference-links","frontmatter":{"title":"Angular Tutorial for Beginners","date":"2022-02-014","lastmod":"2022-02-14","draft":"true","tags":["Angular","Tutorial","Beginner"],"categories":["Samples"],"author":"Susan"},"slug":"api-reference-links","content":"\ncompoonents, reusable, tamplete, \n\nmodule, components\nclient side routing\nserver side routing\n\nunit testing: testable: I think this is imortatnt\ndependency injection\nisolate the view layer from the modle layer, ModuleViewControlContent\n\ncomponents in Angular: is a piece of the Application with an associated template. It has a selector and will render the template,  whereever the selector-tag is located. \nModule instead is a collection of components, directives, pipes and so on.\n\n\n\nThis Angular Tutorial is based on the YouTube Videos:\n(https://youtu.be/k5E2AVpwsko) this video doesn't realy talk about angular project, mainly talk about the folder structure, and typeScript\n\n(https://youtu.be/WHv1YQUg6ow) This is a good tutorial teaching you how to creat a project. through the build project process, let the audien at least know how to creat one project, understand how to use the control, view, content. even it only involves three files: css, html, ts. but it looks like it use Javascript, not TypeScript\n\n\nWhat is Angular?\nAngular is a framework for building client applications in HTML, CSS, and JavaScript/TypeScrip\n\nWhy do we need to use Angular?\n\nClearn code, beter structure, that means easy to maintain, team work, sustasible, \nEasy to test.\n\nArchitecture\nfront-end: user interface, HTML/CSS, TypeScript Angular\nback-end: Data and Processing---Data + APIs-- business logic\n\nAPI \nHTTP service, or API, \nendpoint that are accessable via HTTP protocal\n\n\nfrong-end\nHTML Templates , presentation logic\n\nIMplementation\n\n\nYour First Angular App\n\ninstall node\n```shell\nnode --version\nv6.10.3\n```\n\nI am using node version minimal version 6.9\n\nNOde package manager - npm\nAngular CLI\n\n``shell\nnpm install -g @angular/CLI Command-line Interface\n```\n\n-g  no it, only install on local folder\n@ ??\n\nfor Mac user\n\n``shell\nsudo npm install -g @angular/cli\n```\n\nafter installation, type:\n```shell\nng --version\n```\nYou will see:\n![angular version](/static/images/angular/angular-version.png)\n\nNow you have angular installed. \nLet's create a new angular project.\n```shell\nng new hellp-wold\n```\nit will ask which styl sheet you would like to use, you can select one from CSS, SCSS, SASS, and Less.\nThen it will continue to download and install required packages from third parties.\nWhen it's done, you can see a folder named 'Hello world' in your current folder. the project is successfully created.\nto start coding, we need a code editor, we are going to use VS code, or visual studio code, it's a beutiful cross platform lightweight code editor.\n\n\nfor mac, use cmd+shift_P, for windows, use ctl+shift+P\nopened command pilot.\n\ntype: code and select \"Shell Command: Install 'code' command in PATH\"\nwith this, we can go to the terminal and go to the folder we just created our new projec. simply type: 'Code . '\n\nin the project folder, type:\n```shell\nng serve\n```\nThen, go to 'localhost:4200', you will be able to see that your new project is running.\n\nNow, let's see the structure of our angular project.\n\ne2e: end to end- where to write end to end test, \n\nnode_modules - stor all third parties libaries; we are not going to deploy this folder to the server\nsrc - app - modules and components\nsrc - assets - icons, images, etc.\nsrc - environments - production environment and develop environment\n\nindex.html\n\nmain.ts file, start point of our application, bootstrapMoudule(AppModule)\n\npolyfills.ts - scripts, fill the gap between javaScrip and angular\nstyle.css\ntest.ts \n\nangular-cli.json\neditorconfig - team work, have the same settings\n\njarma.conf.js - test runner\npackage, json - standar file, every nodejs project has.\ndepnedencies:\ndevDependencies:\ntsconfig.json - typeScrip compliler\ntslint.json - static analys tool.\n\nThat is all about the folder structure for now. let's go to the app.\n\ngot to the src/app folder:\n\nangular use webpack which is build automation tool.\n\nHot module reloading?Replacement (HMR)\n\nAbout Angular version \nAngular JS 1 - 2010\nAngular 2 - 2016 - TypeScrip - beeter framework, cleaner\nAngular 4 - \n\n@angular/core, compiler, http, router\n@angular/router 3.\n\n\n\ncourse Structure:\nEssentials, - \nAdvanced Topics, - unit testing, integrate testing\nFinal Project - build one module application, shoping cart, \n\nfire base, \n\n\n**TypeScript Fundamentals**\n- Strong typing\n- Object-oriented features\n- Compile-time errors\n- Great tooling\n\nTranspile from TypeScript to Javascript\n\nINstall TypeScrip\n```shell\nsudo npm install -g typecript\n```\nType:\n```shell\ntsc --version\nversion 4.5.5\n```\n\nTypes in TypeScrip:\n\nnumber - integer, floating\nboolean\nstring\nany\nnumber []\nlet f: any[] = [1, true, 'a', false];\nconst Colorred = 1;\nconst ColorBlue = 2;\nenum Color {Red, Green, Blue }\nle backgroundColor = Color. Red;\n\n**Access modifier**\npublic - default -\nprivate - only can be accessed from inside class\nprotected - \n\nAccess Levels\n\n\n| Modifier | Class | Package | Subclass | World |\n| -------- | ----- | ------- | -------- | ----- |\n| public | Y | Y | Y | Y |\n| protected\t| Y\t| Y |\tY |\tN |\n| no modifier\t| Y |\tY |\tN |\tN |\n| private |\tY\t| N\t| N\t| N |\n\n\n\n**Angular Fundamentls**\n- Components\n- Templates\n- Directives\n- Services\n\nBuilding Blocks of Angular Apps\nComponents - Data, HTMl,Logic -- components based App\nModules - a group of components.\ncreate module\nregist module\nuse module\n\n```shell\nng g c course\n```\n\nangular uses cli, it will create all files needed\nthis way, we don't need to remember to create and register our new components.\n\nTemplates: \n\n\nquick way to create service using angular cli\nng g s email\n"},"__N_SSG":true}